# -*- coding: utf-8 -*-
"""MappingSG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AidpGE1DigmJOWKqdeYgawv0G7iAKxPQ
"""

import pandas as pd
from datetime import datetime, timedelta
from google.colab import files
import re

# Step 1: Upload two files
print("\U0001F4C2 Upload the first file (Vessel Data - 'report' sheet)")
uploaded1 = files.upload()
print("\n\U0001F4C2 Upload the second file (Master List - 'master list' sheet)")
uploaded2 = files.upload()

# Step 2: Get file names
file_name1 = list(uploaded1.keys())[0]  # Vessel Data
file_name2 = list(uploaded2.keys())[0]  # Master List

# Step 3: Load Vessel Data from 'report' sheet
xls1 = pd.ExcelFile(file_name1)
df = pd.read_excel(xls1, sheet_name='report')

# Step 4: Load Master List from 'master list' sheet
xls2 = pd.ExcelFile(file_name2)
df_master_list = pd.read_excel(xls2, sheet_name="master list", usecols=[0, 1], names=["Operator", "Salesperson Code"])

# Step 5: Convert names to lowercase for case-insensitive matching
df["Operator"] = df["Operator"].astype(str).str.lower()
df_master_list["Operator"] = df_master_list["Operator"].astype(str).str.lower()
df_master_list["Salesperson Code"] = df_master_list["Salesperson Code"].astype(str)

# Step 6: Select required columns from vessel data
columns_needed = [
    "ETA", "Vessel Name", "Vessel Type", "Vessel IMO", "Operator", "Group Owner",
    "Registered Owner", "Last Bunkering Start Date", "Last Bunkering Location"
]
filtered_df = df[columns_needed].copy()

# Step 7: Convert date columns to datetime format
filtered_df["ETA"] = pd.to_datetime(filtered_df["ETA"])
filtered_df["Last Bunkering Start Date"] = pd.to_datetime(filtered_df["Last Bunkering Start Date"])

# Step 8: Filter ETA for vessels arriving in 5-12 days from today
today = datetime.today()
start_date = today + timedelta(days=5)
end_date = today + timedelta(days=12)
filtered_df = filtered_df[(filtered_df["ETA"] >= start_date) & (filtered_df["ETA"] <= end_date)]

# Step 9: Format ETA & Last Bunkering Start Date as DD/MM/YY
filtered_df["ETA"] = filtered_df["ETA"].dt.strftime("%d/%m/%y")
filtered_df["Last Bunkering Start Date"] = filtered_df["Last Bunkering Start Date"].dt.strftime("%d/%m/%y")

# Step 10: Keep only the specified vessel types
vessel_types_to_keep = [
    "Vehicles Carrier", "Products Tanker", "Ore Carrier", "General Cargo Ship (Open Hatch)",
    "General Cargo Ship", "Drilling Rig, jack up", "Crude/Oil Products Tanker", "Crude Oil Tanker",
    "Chemical/Products Tanker", "Chemical Tanker", "Bulk Carrier", "Aggregates Carrier"
]
filtered_df = filtered_df[filtered_df["Vessel Type"].isin(vessel_types_to_keep)].reset_index(drop=True)

# Step 11: Function for Token-Based Matching
def tokenize(name):
    """
    Cleans and splits a name into tokens (words) for better matching.
    Removes special characters and converts to lowercase.
    """
    name = name.lower().strip()
    name = re.sub(r'[^a-zA-Z0-9 ]', '', name)  # Remove special characters
    return set(name.split())  # Return unique words in a set

def match_salesperson_codes(operator_name, master_list, threshold=90):
    """
    Finds the best match for operator_name in master_list based on tokenized word overlap.
    Returns multiple Salesperson Codes joined by "/".
    """
    if pd.isna(operator_name):
        return None

    operator_tokens = tokenize(operator_name)
    matched_codes = set()

    for _, row in master_list.iterrows():
        master_tokens = tokenize(row["Operator"])

        if len(master_tokens) == 0:  # Avoid division by zero
            continue

        # Calculate percentage of words that match
        common_words = operator_tokens.intersection(master_tokens)
        match_percentage = (len(common_words) / len(master_tokens)) * 100

        if match_percentage >= threshold:
            matched_codes.add(row["Salesperson Code"])

    return "/".join([code for code in matched_codes if pd.notna(code)]) if matched_codes else "APPROACH"

# Step 12: Apply matching function to assign multiple Salesperson Codes
filtered_df["Salesperson Code"] = filtered_df["Operator"].apply(lambda x: match_salesperson_codes(x, df_master_list))

# Step 13: Remove duplicate Operator names, keeping the first occurrence
filtered_df = filtered_df.drop_duplicates(subset=["Operator"], keep='first')

# Step 14: Save the cleaned data as an Excel file
output_file = "Filtered_Vessel_Data.xlsx"
filtered_df.to_excel(output_file, index=False)

# Step 15: Provide the file for download
files.download(output_file)

print(f"âœ… Process completed. Download your file: {output_file}")